<configuration>

    <property name="LOG_PATH" value="C:/restlogs/errorlogs"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--<appender class="ch.qos.logback.core.FileAppender"> 필터 설정이 잘못됨.. 수정 필요
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMisMatch>DENY</onMisMatch>
        </filter>

        <file>${LOG_PATH}/error.log</file>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>-->

    <root level="debug">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>

<!--Logger,Appender,Layout 세가지 유형의 구성 요소는
개발자가 메시지 유형 및 수준에 따라 메시지를 기록하고 런타임에
메시지의 형식과 위치를 제어할 수 있도록 함께 작동-->

<!--
* 로그 레벨 : TRACE < DEBUG < INFO < WARN < ERROR
  - 지정된 레벨 이상을 모두 로그로 찍음 (그 이하는 찍지 않음)
  - trace : 추적레벨은 debug보다 훨씬 상세한 정보를 나타냄
  - debug : 프로그램을 디버깅하기 위한 정보를 표시
  - info : 상태 변경과 같은 정보성 로그를 표시
  - warn : 처리 가능한 문제, 향후 시스템 에러 원인이 될 수 있는 경고성 메시지
  - error : 요청을 처리하는 중 발생한 오류를 표시

* logger
  - appender-ref 엘리먼트로 appender를 참조하여 해당 로거가 사용될 패키지와 로그레벨을 지정
  - name속성으로 지정된 패키지에서는 해당 logger를 사용
  - addditivity값은 root 설정 상속 유무를 설정함 (default = true)

* root
  - 글로벌 로거
  - logger로 설정하지 않았다면 root가 실행됨

* appender
  - 출력 목적지
  - logger에 여러 개 설정 가능
  - logger 계층 구조로 부터 추가적으로 상속됨
  - 출력 목적지와 출력형식을 커스터마이징하기 위해서 appender와 layout을 함께 사용
  - layout에 의해 포맷된 출력을 목적지로 전송
  - ConsoleAppender : 콘솔 / FileAppender : 파일 / RollingFileAppender : 여러 개 파일 순회
    / SMTPAppender : 메일전송 / DBAppender : 데이터베이스

* layout
  - 사용자의 희망에 따라 로깅요청을 포맷팅
  - 이벤트를 String으로 변환하여 이벤트 기록시 제어할 수 X
  - 이벤트를 일괄 처리로 집계할 수 없음

* encoder
  - 바이트를 소유하고 있는 appender가 관리하는 OutputStream에 쓸 시간과 내용을 제어할 수 O
  - FileAppender와 하위 클래스는 encoder를 사용 (layout 사용 X)

* pattern : 변환되는 패턴에 따라 출력 형식을 지정할 수 있음
  - pattern 작성룰에 의해 정의된 Appender는 logger가 참조하여 로그를 찍음
    ex) %-4relative [%thread] %-5level %logger{32} - %msg%n
       => 176  [main] DEBUG manual.architecture.HelloWorld2 - Hello world.
       => 176 : 프로그램 시작 후 경과한 밀리세컨드 초
       => [main] : 로그 요청을 하는 쓰래드
       => DEBUG : 로그 요청의 레벨
       => manual.architecture.HelloWorld2 : 로그 요청과 관련된 로거의 이름
       => Hello world : 요청된 메시지

* property
  - 설정 파일에서 사용할 변수를 지정

* filter
  - 순서 목록으로 구성
  - 각 필터의 decide()는 순서대로 호출되며, 이 메소드는 DENY, NEUTRAL, ACCEPT를 반환
    => DENY : 로그 이벤트는 나머지 필터를 고려하지 않고 즉시 삭제
    => NEUTRAL : 목록의 다음 필터를 참조하고, 더이상 참조할 필터가 없으면 로깅이벤트가 정상적으로 처리됨
    => ACCEPT : 로깅 이벤트는 나머지 필터의 호출을 건너뛰고 즉시 처리된다.
  - LevelFilter
    => 정확한 레벨 일치를 기준으로 이벤트를 필터링
    => 이벤트의 레벨이 구성된 레벨과 같을 경우 필터는 onMatch 및 onMismatch 속성의 구성에 따라 이벤트를 허용하거나 거부
  - ThresholdFilter
    => 지정된 임계 값보다 낮은 이벤트를 필터링
    => 레벨이 임계 값과 같거나 그 이상인 이벤트의 경우, ThresholdFilter는 decide() 방법이 호출될 때 NEUTRAL로 응답
    => 그러나 임계 값보다 낮은 수준의 이벤트는 거부됨
    => 즉 지정한 레벨 이상만 로깅함...
  - EvaluatorFilter
    => EventEvaluator을 캡슐화하는 일반적인 필터
    => 이벤트에 대해 주어진 기준을 충족하는지 평가
    => 일치 및 불일치 시 EvaluatorFilter 호스트에서는 onMatch 또는 onMismatch 속성으로 지정된 값을 각각 반환
    => EventEvaluator는 추상화 클래스로, 개발자 스스로 이벤트 평가 로직을 EventEvaluator 하위 클래스로 구현할 수 있음

http://logback.qos.ch/manual/architecture.html#basic_selection
-->